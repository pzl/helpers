#!/usr/bin/env python
"""
convenience script for making animated gifs from 
youtube or other videos using ffmpeg, imagemagick and/or gifsicle

Copyright (c) 2014 Dan Panzarella

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
 
The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE. 
"""
import os, sys
import subprocess
import glob
import argparse
import shutil
import string, random


"""
	@todo:
		- take size argument
		- fuzzing / quality slider?
		- configurable frame rate (of pulling from vid, and output gif)  (-r N and -vf "fps=N")
		- restore optimizer (gifsicle -O3)
		- frame skipping+speed reduction for some savings (affects frame rate)
"""

FRAME_RATE=25
SIZE="1280x720"

FRAME_PATTERN="frame-%03d.png"
FRAME_GLOB="frame-*.png"

PALETTE_NAME="/tmp/palette-%s.png"
PALETTE_GLOB=PALETTE_NAME % "*"


#decorator to specify that a function requires a specific program be installed
def requires(program):
	def not_installed():
		print("%s needs to be installed for this to work" % program,file=sys.stderr)
		sys.exit(1)
	def decorator(func):
		if shutil.which(program):
			return func
		else:
			return not_installed
	return decorator


def parse_args():
	parser = argparse.ArgumentParser(description='Creates gifs')
	#positional args
	parser.add_argument('video',metavar='VIDEO',help="Input video to be converted. Can be YouTube URL")
	parser.add_argument('output',metavar='GIF_NAME',nargs='?',default=".gif",help="Output gif name")
	#flag arguments
	parser.add_argument('-s','--start',metavar='TIME',default="0",help="start time (roughly, will ask for exact frame later)")
	parser.add_argument('-d','--duration',metavar='TIME',default="5",help="duration (roughly, will ask for exact frame later)")
	parser.add_argument('-k','--keep',dest='keep_frames',action='store_true',help="Keep (do not discard) PNG frames")
	parser.add_argument('-f','--frames-only',dest='frames_only',action='store_true',help="Generate PNG frames only, then exit")
	#parser.add_argument('--optimize',dest='optimize',action='store_true',help="generate gifsicle optimized gifs")

	return parser.parse_args()

def validate_args(args):
	if args.video.lower()[:4] == 'http':
		filename = video_filename(args.video)
		if os.path.isfile(filename):
			print('file exists, not re-downloading')
		else:
			print("downloading video from youtube")
			download_video(args.video)
			if not os.path.isfile(filename):
				print("downloaded video, but could not locate saved file",file=sys.stderr)
				sys.exit(1)
		return filename
	else:
		if not os.path.isfile(args.video):
			print("could not find video file %s" % args.video,file=sys.stderr)
			sys.exit(1)

	return args.video



@requires('youtube-dl')
def download_video(url):
	result = subprocess.run(["youtube-dl","-c","-i","-f","22",url],check=True)

@requires('youtube-dl')
def video_filename(url):
	filename = subprocess.run(["youtube-dl","--get-filename",url],stdout=subprocess.PIPE,check=True)
	filename = filename.stdout.decode('utf-8').strip()
	return filename

@requires('ffmpeg')
def video_to_frames(video,start,duration):
	print('creating frames...')
	result = subprocess.run(["ffmpeg","-ss",start,"-t",duration,"-i",video,"-r",str(FRAME_RATE),"-s",SIZE,"-f","image2",FRAME_PATTERN],check=True,stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)

@requires('ffmpeg')
def frames_to_video(filename):
	result = subprocess.run(["ffmpeg","-f","image2","-i",FRAME_PATTERN,"-c:v","libx264","-qp","0","-preset","fast","-pix_fmt","yuv444p","-r",str(FRAME_RATE),"-y",filename],check=True,stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)

def clear_frame_files():
	for filename in glob.glob(FRAME_GLOB):
		os.remove(filename)

def clear_palette_files():
	for filename in glob.glob(PALETTE_GLOB):
		os.remove(filename)

@requires('sxiv') #@todo: pop up our own window? not hard to add an image viewer here
def choose_frames():
	files = sorted(glob.glob(FRAME_GLOB))
	proc = subprocess.Popen(["sxiv"]+files)
	start_frame = int(input("Review the images and enter the starting frame number: "))
	if not os.path.isfile(FRAME_PATTERN % start_frame):
		print("That was not a valid frame we showed you",file=sys.stderr)
	end_frame = int(input("Enter the ending frame number: "))
	if not os.path.isfile(FRAME_PATTERN % end_frame):
		print("That was not a valid frame we showed you",file=sys.stderr)

	proc.terminate()
	return (start_frame,end_frame)


def convert_time(tm):
	"""
	Converts a given time to seconds
	Time can be presented as just seconds (does nothing)
	or of the format HH:MM:SS.MICROSECONDS
	"""
	seconds=0 #our accumulator
	scale=1 #used when converting minutes, hours
	micro="0" #add back any microseconds given
	tm=str(tm)
	if '.' in tm:
		tm,micro = tm.split('.')
	units = tm.split(':')
	#now, work in increasing order as (minutes,hours) are optional
	units.reverse()
	for i in units:
		seconds += (int(i)*scale)
		scale *= 60 #next time unit up will need this as the scaler
	return float("%d.%s" % (seconds,micro))


def random_name(n=5):
	return ''.join(random.choice(string.ascii_letters) for _ in range(n))


def calculate_exact_times(start_time,end_time,start_frame,end_frame):
	start = convert_time(start_time)

	start += start_frame/(FRAME_RATE*1.0) #move start forward by however many chosen frames
	end = (end_frame - start_frame - 1)/(FRAME_RATE*1.0) #original chosen time can be totally discarded
	# duration is simply relative to new start. get there just by frame counting
	
	return ("%.03f" % start,"%.03f" % end)

def make_all(video,start,end,filename):
	pids=[]
	simple = ffmpeg(video,start,end)

	pids += [simple("-gifflags","-transdiff","-y","01-notrans-%s" % filename)]
	pids += [simple("-gifflags","+transdiff","-y","01-trans-%s" % filename)]

	#generate webm!
	pids += [simple("-c:v","libvpx","-crf","4","-b:v","50M","-c:a","libvorbis","-an","-y","%s.webm" % filename.rsplit(".",1)[0])]

	pids += [ffmpeg(video,start,end,':sws_dither=ed')("-y","02-sws_dither-%s" % filename)]

	name=PALETTE_NAME % random_name()
	ffmpeg(video,start,end,',palettegen')("-y",name,bg=False) #create palette
	pids += [ffmpeg(video,start,end,' [x]; [x][1:v] paletteuse','-lavfi')("-i",name,"-y","03-palette-%s"%filename)]


	pids += stats_mode(video,start,end,filename,"full") # overall palette quality
	pids += stats_mode(video,start,end,filename,"diff") # care more about moving parts

	return pids #return all the background processes we launched, so you can check when they're all done


def stats_mode(video,start,end,filename,mode):
	pids=[]
	diffusers = ("none","bayer:bayer_scale=1","bayer:bayer_scale=2","bayer:bayer_scale=3","floyd_steinberg","sierra2","sierra2_4a")

	name=PALETTE_NAME % random_name()
	ffmpeg(video,start,end,',palettegen=stats_mode=%s' % mode)("-y",name,bg=False) #create palette
	pids += [ffmpeg(video,start,end,' [x]; [x][1:v] paletteuse','-lavfi')("-i",name,"-y","04-palette_%s-%s"%(mode,filename))] #base without diffusers
	for d in diffusers:
		pids += [ffmpeg(video,start,end,' [x]; [x][1:v] paletteuse=dither=%s' % d,'-lavfi')("-i",name,"-y","05-palette_%s_%s-%s"%(mode,d,filename))]
	return pids

@requires('ffmpeg')
def ffmpeg(video,start,end,scaleopts='',flagname="-vf"):
	scale = SIZE.replace('x',':')
	def newfunc(*args,bg=True):
		launch = subprocess.Popen if bg else subprocess.run
		return launch(["ffmpeg","-v","warning","-ss",start,"-t",end,"-i",video,flagname,"scale=%s:flags=lanczos%s" % (scale,scaleopts),*args],stdout=subprocess.DEVNULL,stderr=subprocess.DEVNULL)
	return newfunc

def main():
	args = parse_args()
	video_name = validate_args(args)
	if not video_name:
		sys.exit(1)

	video_to_frames(video_name,args.start,args.duration)

	if args.frames_only:
		sys.exit(0)

	start_frame,end_frame = choose_frames()

	if not args.keep_frames:
		clear_frame_files()
	
	start,end = calculate_exact_times(args.start,args.duration,start_frame,end_frame)

	print("creating gifs...")
	background_processes = make_all(video_name,start,end,args.output)
	print("processing...")
	for pid in background_processes:
		pid.wait()
	print('cleaning up')
	clear_palette_files()
	print('done')



if __name__ == "__main__":
	main()