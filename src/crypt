#!/bin/bash
# Small convenience script for symmetrically encrypting or decrypting files with AES256
#
# Copyright (c) 2015 Dan Panzarella
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

#exit immediately for any failed commands.
#prevents deleting the cleartext if the encryption command failed,
#which would leave you with no data
set -e

#check for `crypt -h`, print and exit
if [ "$1" == "-h" ] || [ "$1" == "--help" ]; then
    echo "Usage: $(basename "$0") FILE [OUTPUT_FILE]"
    exit
fi

command -v gpg >/dev/null 2>&1 || { echo "GPG must be installed" >&2; exit 1; }


#get input filename and make sure it can be used
readonly FILE="${1%/}" #%/ to remove any trailing slashes (esp on directories)
if [ ! -e "$FILE" -o ! -f "$FILE" -a ! -d "$FILE"  -o ! -r "$FILE" -o ! -s "$FILE" ]; then
    echo "Cannot use "$FILE", might not be readable, or might be empty" >&2
    exit 1
fi

# set preferred pinentry mode. pinentry-curses and pinentry-tty are console-based
if file -b "$FILE" | grep "GPG.*encrypted" >/dev/null 2>&1; then
    #input file is already encrypted, we are decrypting
    echo "decrypting.."
    gpg "${FILE}"

    #if bzipped, we're not done. was probably a dir
    if file -b "${FILE%.gpg}" | grep "^bzip2" >/dev/null 2>&1; then
        echo "expanding directory.."
        tar -xjf "${FILE%.gpg}"
    fi

    rm -rf "$FILE"
else
    echo "Encrypting ${FILE}."

    #directories can't be gpg'd directly. tar first
    if [ -d "$FILE" ];then
        tar -cjf "${FILE}.tar.bz" "$FILE"
        gpg -c --cipher-algo aes256 -z 0 -o "${FILE}.gpg" "${FILE}.tar.bz"
        rm -rf "${FILE}.tar.bz"
    else
        gpg -c --cipher-algo aes256  --compress-algo bzip2 -z 9 "${FILE}"
    fi
    rm -rf "$FILE"
fi


